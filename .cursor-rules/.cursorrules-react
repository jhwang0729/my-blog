# React-Specific Cursor Rules

## Component Development

### Component Design Principles
- Single Responsibility: Each component should have one clear purpose
- Composition over Inheritance: Use composition to build complex UIs
- Props Interface: Define clear, typed interfaces for all props
- Default Props: Use default parameters instead of defaultProps
- Ref Forwarding: Forward refs when creating reusable components

### Hooks Best Practices
- Custom Hooks: Extract reusable logic into custom hooks
- Dependency Arrays: Always include all dependencies in useEffect
- Cleanup: Always cleanup subscriptions and timers in useEffect
- Memoization: Use useMemo and useCallback only when necessary
- State Updates: Use functional updates when state depends on previous state

### Performance Optimization
- React.memo: Wrap components that receive stable props
- Lazy Loading: Use React.lazy for code splitting
- Virtual Scrolling: Implement for large lists
- Image Optimization: Use next/image or similar for optimized loading
- Bundle Analysis: Regularly analyze and optimize bundle size

### State Management Patterns
- Local State: Use useState for component-specific state
- Shared State: Use Context API for app-wide state
- Server State: Use React Query for server data
- Form State: Use React Hook Form for complex forms
- URL State: Use router state for shareable application state

### Error Handling
- Error Boundaries: Implement at route and component levels
- Suspense: Use with lazy loading and data fetching
- Loading States: Always handle loading states gracefully
- Error States: Provide meaningful error messages and recovery options
- Fallback UI: Always provide fallback components

### Component Patterns
- Compound Components: For complex, related component groups
- Render Props: For sharing logic between components
- Higher-Order Components: Use sparingly, prefer hooks
- Controlled Components: For form inputs and interactive elements
- Uncontrolled Components: Only when necessary for performance

### Testing React Components
- Render Testing: Test what users see and interact with
- User Events: Use userEvent library for realistic interactions
- Mocking: Mock external dependencies and API calls
- Accessibility Testing: Include a11y assertions in tests
- Snapshot Testing: Use sparingly, only for stable components

## Code Examples

### Custom Hook Pattern
```tsx
export const useApiData = <T>(url: string) => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(url);
        if (!response.ok) throw new Error('Failed to fetch');
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return { data, loading, error };
};
```

### Error Boundary Pattern
```tsx
interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<
  PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: PropsWithChildren<{}>) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <ErrorFallback error={this.state.error} />;
    }

    return this.props.children;
  }
}
```

### Compound Component Pattern
```tsx
interface TabsContextType {
  activeTab: string;
  setActiveTab: (tab: string) => void;
}

const TabsContext = createContext<TabsContextType | null>(null);

export const Tabs = ({ children, defaultTab }: TabsProps) => {
  const [activeTab, setActiveTab] = useState(defaultTab);
  
  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>
      <div className="tabs">{children}</div>
    </TabsContext.Provider>
  );
};

export const TabList = ({ children }: { children: ReactNode }) => (
  <div className="tab-list" role="tablist">{children}</div>
);

export const Tab = ({ id, children }: TabProps) => {
  const context = useContext(TabsContext);
  if (!context) throw new Error('Tab must be used within Tabs');
  
  const { activeTab, setActiveTab } = context;
  
  return (
    <button
      role="tab"
      aria-selected={activeTab === id}
      onClick={() => setActiveTab(id)}
      className={`tab ${activeTab === id ? 'active' : ''}`}
    >
      {children}
    </button>
  );
};
```

## React 18+ Features
- Concurrent Features: Use startTransition for non-urgent updates
- Suspense: Implement for data fetching and code splitting
- Automatic Batching: Leverage automatic state update batching
- Strict Mode: Always develop with StrictMode enabled
- New Hooks: Use useId, useDeferredValue, and useTransition appropriately 